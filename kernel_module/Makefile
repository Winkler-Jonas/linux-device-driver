# Makefile for compiling a kernel module.

# Check if the KERNELRELEASE variable is defined. This variable is defined by the kernel build system.
# If KERNELRELEASE is defined, we are invoked from the kernel build system and can use its language.
ifneq ($(KERNELRELEASE),)
# The name of the module(s) we want to build. The .o file will be turned into a .ko module file.
obj-m := rainbow_hat_driver.o

# If KERNELRELEASE is not defined, we were called directly from the command line.
# In this case, we need to invoke the kernel build system.
else
# Path to the kernel build directory
KDIR := /lib/modules/$(shell uname -r)/build

# Current directory
PWD := $(shell pwd)

# Default target: compile the module
# This target is the default if no target is specified.
# It triggers the build of the module by calling the kernel build system.
default: all

# Target for building the module using the kernel build system.
# The '-C' flag changes the directory to the kernel build directory.
# 'M=$(PWD)' tells the kernel build system where the external module source files are located.
# 'modules' is the target in the kernel's Makefile that compiles external modules.
all:
	$(MAKE) -C $(KDIR) M=$(PWD) modules

# Target for installing the module.
# It also uses the kernel build system to install the module into the appropriate directory.
modules_install:
	$(MAKE) -C $(KDIR) M=$(PWD) modules_install

# Target for cleaning up build artifacts.
# It cleans the current directory of any files generated by the build process.
clean:
	$(MAKE) -C $(KDIR) M=$(PWD) clean
endif

